#server.port=8080
#spring.jackson.date-format=RFC3339DateFormat
#spring.jackson.date-format=yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
#spring.jackson.date-format=yyyy-MM-dd
#spring.jackson.time-zone=UTC
#spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false

#logging.level.org.springframework.web=INFO

#--------------------- a voir ce qu'on garde ci-dessus ----------------------

# ===============================
# = SPRING BOOT
# ===============================
server.port=${env.SPRING_SERVER_PORT}

#hibernate config

# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
spring.datasource.url = jdbc:mysql://${env.DATABASE_SERVER_ADDRESS}:${env.DATABASE_SERVER_PORT}/${env.DATABASE_NAME}?allowPublicKeyRetrieval=true&useSSL=false

# Username and password
spring.datasource.username = ${env.DATABASE_USERNAME}
spring.datasource.password = ${env.DATABASE_PASSWORD}

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect