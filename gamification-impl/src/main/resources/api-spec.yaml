openapi: '3.0.3'
info:
  version: '0.1.0'
  title: Gamification API
  description: An API to gamification remote application
security:
  #  - bearerAuth: []
  - apiKeyAuth: []
paths:
  /users:
    post:
      description: create a user
      operationId: createUser
      security:
        - apiKeyAuth: []
      parameters:
        - in : header
          name: X-API-KEY
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: created
    get:
      description: get the list of users for the application
      operationId: getUsers
      security:
        - apiKeyAuth: []
      parameters:
        - in : header
          name: X-API-KEY
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      description: get one user, by id
      operationId: getUser
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in : header
          name: X-API-KEY
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}/badges:
    get:
      description: get all user's badges
      operationId: getUsersBadges
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in : header
          name: X-API-KEY
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'

  /users/{id}/pointscale:
    get:
      description: get all user's pointScales
      operationId: getUsersPointScales
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
        - in : header
          name: X-API-KEY
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pointscale'
  /users/{username}/reputation:
    get:
      description: get full user reputation
      operationId: getUserReputation
      security:
        - apiKeyAuth: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
        - in : header
          name: X-API-KEY
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Reputation'
  /users/reputations:
    get:
      description: get all user reputation
      operationId: getReputations
      security:
        - apiKeyAuth: []
      parameters:
        - in : header
          name: X-API-KEY
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reputation'
  /pointscale:
    post:
      description: get all user's pointScales
      operationId: createPointScales
      security:
        - apiKeyAuth: [ ]
      parameters:
        - in: header
          name: X-API-KEY
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Pointscale'
      responses:
        '201':
          description: created

  /events:
    post:
      description: submit an event
      operationId: processEvent
      parameters:
        - in : header
          name: X-API-KEY
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '202':
          description: accepted
  /badges:
    post:
      description: create a badge
      operationId: createBadge
      security:
        - apiKeyAuth: []
      parameters:
        - in : header
          name: X-API-KEY
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Badge'
      responses:
        '201':
          description: created
    get:
      description: get all badger for the application
      operationId: getBadges
      security:
        - apiKeyAuth: []
      parameters:
        - in : header
          name: X-API-KEY
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
  /applications:
    post:
      description: create an application
      operationId: createApplication
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '201':
          description: created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ApiKey'
    get:
      description: get the application info
      operationId: getApplication
      security:
        - apiKeyAuth: []
      parameters:
        - in: header
          name: X-API-KEY
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Application'
  /rules:
    get:
      description: get rules for an application
      operationId: getRules
      security:
        - apiKeyAuth: []
      parameters:
        - in: header
          name: X-API-KEY
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rule'
    post:
      description: create a rule for an application
      operationId: createRule
      security:
        - apiKeyAuth: []
      parameters:
        - in: header
          name: X-API-KEY
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '201':
          description: created

components:
  securitySchemes:
    #    bearerAuth:            # arbitrary name for the security scheme
    #      type: http
    #      scheme: bearer       # warning: it HAS TO be a lowercase b for the swagger ui version used in springfox
    #      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    # Scheme for Events
    Event:
      type: object
      properties:
        timestamp:
          type: integer
          format: int64
        eventType:
          type: string
        eventparams:
          type: object
          properties:
            username: # identity convention between client and GameEngine to identify uniquely a user
              type: string
    Rule:
      type: object
      properties:
        if:
          type: object
          properties:
            eventType:
              type: string
        then:
          type: object
          properties:
            action:
              type: object
              properties:
                name:
                  type: string
                target:
                  type: string
                amount:
                  type: integer
    Pointscale:
      type: object
      properties:
        label:
          type: string
        pointCounter:
          type: integer

    # Scheme for Badges
    Badge:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        color:
          type: string
        description:
          type: string
    # Scheme for User
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
    Application:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    ApiKey:
      type: object
      properties:
        key:
          type: string
          format: uuid
    Reputation:
      allOf:
        - type: object
        - $ref: '#/components/schemas/User'
      properties:
        bagdes:
          type: array
          items:
            $ref: '#/components/schemas/Badge'
        pointscales:
          type: array
          items:
            $ref: '#/components/schemas/Pointscale'